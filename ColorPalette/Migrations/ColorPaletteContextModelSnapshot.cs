// <auto-generated />
using System;
using ColorPalette.Domain.DataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ColorPalette.Migrations
{
    [DbContext(typeof(ColorPaletteContext))]
    partial class ColorPaletteContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ColorPalette.Domain.Models.ColorModel", b =>
                {
                    b.Property<int>("ColorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ColorId"));

                    b.Property<string>("Desciption")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("HexCode")
                        .IsRequired()
                        .HasColumnType("varchar(7)");

                    b.Property<DateTime?>("IsDeleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ColorId");

                    b.HasIndex("HexCode")
                        .IsUnique();

                    b.ToTable("ColorModels");
                });

            modelBuilder.Entity("ColorPalette.Domain.Models.PaletteColor", b =>
                {
                    b.Property<int>("ColorModelId")
                        .HasColumnType("int");

                    b.Property<int>("PaletteModelId")
                        .HasColumnType("int");

                    b.Property<byte?>("ColorOrder")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("IsDeleted")
                        .HasColumnType("datetime2");

                    b.HasKey("ColorModelId", "PaletteModelId");

                    b.HasIndex("PaletteModelId");

                    b.ToTable("PaletteColors");
                });

            modelBuilder.Entity("ColorPalette.Domain.Models.PaletteModel", b =>
                {
                    b.Property<int>("PaletteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaletteId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("IsDeleted")
                        .HasColumnType("datetime2");

                    b.Property<int>("LikeCount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("ThemeId")
                        .HasColumnType("int");

                    b.HasKey("PaletteId");

                    b.HasIndex("ThemeId");

                    b.ToTable("PaletteModels");
                });

            modelBuilder.Entity("ColorPalette.Domain.Models.PaletteTag", b =>
                {
                    b.Property<int>("PaletteModelId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("IsDeleted")
                        .HasColumnType("datetime2");

                    b.HasKey("PaletteModelId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("PaletteTag");
                });

            modelBuilder.Entity("ColorPalette.Domain.Models.PaletteTheme", b =>
                {
                    b.Property<int>("ThemeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ThemeId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("IsDeleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("ThemeId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("PaletteThemes");
                });

            modelBuilder.Entity("ColorPalette.Domain.Models.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"));

                    b.Property<DateTime?>("IsDeleted")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("TagId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("ColorPalette.Domain.Models.PaletteColor", b =>
                {
                    b.HasOne("ColorPalette.Domain.Models.ColorModel", "ColorModel")
                        .WithMany("PaletteColors")
                        .HasForeignKey("ColorModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ColorPalette.Domain.Models.PaletteModel", "PaletteModel")
                        .WithMany("PaletteColors")
                        .HasForeignKey("PaletteModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ColorModel");

                    b.Navigation("PaletteModel");
                });

            modelBuilder.Entity("ColorPalette.Domain.Models.PaletteModel", b =>
                {
                    b.HasOne("ColorPalette.Domain.Models.PaletteTheme", "PaletteTheme")
                        .WithMany("PaletteModels")
                        .HasForeignKey("ThemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaletteTheme");
                });

            modelBuilder.Entity("ColorPalette.Domain.Models.PaletteTag", b =>
                {
                    b.HasOne("ColorPalette.Domain.Models.PaletteModel", "PaletteModel")
                        .WithMany("PaletteTags")
                        .HasForeignKey("PaletteModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ColorPalette.Domain.Models.Tag", "Tag")
                        .WithMany("PaletteTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaletteModel");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("ColorPalette.Domain.Models.ColorModel", b =>
                {
                    b.Navigation("PaletteColors");
                });

            modelBuilder.Entity("ColorPalette.Domain.Models.PaletteModel", b =>
                {
                    b.Navigation("PaletteColors");

                    b.Navigation("PaletteTags");
                });

            modelBuilder.Entity("ColorPalette.Domain.Models.PaletteTheme", b =>
                {
                    b.Navigation("PaletteModels");
                });

            modelBuilder.Entity("ColorPalette.Domain.Models.Tag", b =>
                {
                    b.Navigation("PaletteTags");
                });
#pragma warning restore 612, 618
        }
    }
}
